//File: shell.cpp
//A driver program will serve as a shell interface that will
//accept command  and the execute exach command in a separate
//process
//-----------------------------------------------------------------
// Class: CS 470                     Instructor: Dr. Deborah Hwang
// Assignment:    Shell Project      Date assigned:  1/24/2018
// Programmer:    Kunal Mukherjee    Date completed: 2/7/2018

#include <iostream> // cin, cout
#include <unistd.h> // fork, execvp, getcwd, chdir
#include <sys/types.h> // pid_t
#include <sys/wait.h> // wait
#include <string> // string
#include <cstring> // strcpy
#include <queue>
#include <sstream>
#include <stdlib.h>
#include <vector>

using namespace std;

//Maximum number of commands
#define MAXHISTORY 10 

//takes the commands from the commandline and puts it in queue
queue<string> inputFromuser();

//takes the queue  by refrence and changes it into an array of C string
char** convert(queue<string>* argument);

//Prints the history by taking a vector by refrence that has all the prev
//arguments and a int that shows which element to access it
void printPast(int curr, vector<queue<string> >* history);

int main (int argc, char* argv[]){

  //a queue to store the commands entered
  queue <string> cmd;
  //flag to determine if '&' was entered
  bool background = false;
  //flag to determine whne to exit program
  int should_run = 1;
  //store the size of the commad
  int size, k;
  //temporary storage of &
  string temp;
  //vector that stores the past commands
  vector<queue<string> > history;
  //current history counter
  int curr = 0;
  
  
  while (should_run){

    background = false;

    //get the user input
    cmd = inputFromuser();
    size = cmd.size();

    // if empty do nothing
    if (cmd.size() == 0)
      continue;
      
    // check for "exit"
    else if (cmd.front() == "exit")
      // terminate program
      exit(0);

    // check for "history"
    else if (cmd.front() == "history")
      {
	// display history
	printPast(curr, &history);
	 
	// done
	continue;
      }
   
    // check if "!!"
    else if (cmd.front() == "!!")
      {
	// display error message if history is empty
	if (history.size() == 0)
	  {
	    cout << "History is empty\n";
	    continue;
	  }
	else
	  {
	    // change input to most recent command
	    cmd = history.back();
	    size = cmd.size();
	  }
      }
      
    // check if "!N", where N is an integer
    else if (cmd.front()[0] == '!')
      {
	// copy string
	string str = cmd.front();
	 
	// remove '!'
	str.erase(0, 1);
	 
	int N = 0;
	 
	// try to parse number, if not then catch the exception
	//and let the user know
	try {
	  // parse integer
	  N =atoi(str.c_str());
	}
	catch(const std::invalid_argument& e)
	  {
	    // display message if couldn't parse
	    cout << "Error: invalid command number\n";
	    continue;
	  }
	 
	// checking to see if valid
	if (N > curr || N <= (curr - (int)history.size()))
	  {
	    cout << "No such command found in history\n";
	    continue;
	  }
	 
	// change input to N'th command
	cmd = history.at(N - curr + history.size() - 1);	
	size = cmd.size();
	
	
      }

    // increment current command number
    curr++;
      
    // add to history
    history.push_back(cmd);
      
    // if history contains more than MAXHIST elements, then remove the oldest
    if (history.size() > MAXHISTORY)
      {
	//cout << "in" << endl;
	history.erase(history.begin());
	curr = 10;
      }

    //conditional to see if '&' was entered
    if (cmd.back() == "&"){
      background = true;
    }

    if(background){
      //removing the &
      k = 1;
    
      while ( k < size){
	temp = cmd.front();
	cmd.pop();
	cmd.push(temp);
	k++;
      }
      //cout << cmd.front() << endl;
      cmd.pop();
    }
    

    // convert arguments to C strings for passing
    //to execvp function
    char** args = convert(&cmd);

    // fork to create child process
    pid_t pid;
    pid = fork();
      
    // if failed:
    if (pid < 0)
      {
	// display message and exit
	cout << "The fork failed\n";
	exit(1);
      }
      
    // if child:
    else if (pid == 0)
      {
	// if contained '&', detach process from shell program
	if (background)
	  {
	    // fork again to create grandchild process
	    pid = fork();
	    
	    // if failed:
	    if (pid < 0)
	      {
		cout << "The fork failed\n";
		exit(1);
	      }
	    
	    // if grandchild:
	    else if (pid == 0)
	      {
		// execute command and the init will the adopt process
		if (execvp(args[0], args) < 0)
		  {
		    // if failed: display message and exit
		    cout << "The exec comand failed\n";
		    exit(1);
		  }
	      }
	    
	    // if child:
	    else
	      {
		// free memory
		//size_t used so that it can store the max size of any
		//throritcal object
		for(size_t i = 0; i < size; i++)
		  delete [] args[i];
	       
		delete [] args;
	       
		// terminate child
		exit(0);
	      }
	    
            // reset in background bool
	    background = false;
	  }
	 
	// if didn't have '&', then run in child process
	else
	  {
	    // execute command
	    if (execvp(args[0], args) < 0)
	      {
		// if failed: display message and exit
		cout << "The exec failed\n";
		exit(1);
	      }
	  }
      }
      
    // if parent:
    else
      {
	// wait for child exec to finish
	wait(NULL);

	// free memory
	for(size_t i = 0; i < size; i++)
	  delete [] args[i];
	 
	delete [] args;

      }
  } // end of while(1) loop 
  
  
  return 0;
  
}

//the input function that gets the user input
//and puts it in a queue
queue<string> inputFromuser(){
  
  //storing the user commands
  string camd;
  
  //string the arguments
  queue<string> args;

  //output the promt
  cout << "osh> ";

  //read the input
  getline(cin,camd);

  //nothing entered , just return the empty string
  if (camd.empty()){
	return args;
      }

  //create string stream
  istringstream iss(camd);

  //storage each argument
  string temp;

  //read each argument and store it in queue
  while (iss >> temp){
    args.push(temp);
  }

  return args;      
}

// Function: convert
// converts vector of C++ strings to array of C strings
char** convert(queue<string>* argument)
{
  queue <string> temp;
  
  int size = argument->size();
  int j = 0;
  string temps;

  //makeing a copy of the original queue
  while (j < size){
    temps = argument->front();
    argument->pop();
    temp.push(temps);
    argument->push(temps);
    j++;
  }
  
  // create storage for C strings
   char** args = new char*[argument->size() + 1];
   int i = 0;
   
   while(!argument->empty()){
     args[i] = new char[argument->front().size() + 1];
     strcpy(args[i], argument->front().c_str());
     i++;
     argument->pop();     
   }

   //repopulating the original queue
   j = 0;
   while (j < size){
     temps = temp.front();
     temp.pop();
     argument->push(temps);
     j++;
   }   
   
   // must be NULL terminated
   args[size] = NULL;

   // return array of C strings
   return args;
}

// Function: printPast
void printPast(int curr, vector<queue<string> >* history)
{
  queue<string> temp_q;
  string temp;
  int size, k;

  // if haven't executed any commands, then do nothing
  if (curr == 0)
    {
      return;
    }
      
  // for each command in history
  for (int x = history->size() - 1; x >= 0; x--)
    {     
      // write all args
      temp_q = history->at(x);
      size = temp_q.size();       
      k = 0;
      // write command number
      cout << curr << " ";
    
      while (k < size){
	temp = temp_q.front();
	temp_q.pop();
	temp_q.push(temp);	
	cout << temp << " ";
	k++;
      }

      // new line
      cout << "\n";

      // decrement command number
      curr--;
  
    }  
      
      
  
}




