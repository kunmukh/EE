import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;

public class Gameplay {
    private Board board;
    private ArrayList<Integer> dice = new ArrayList<>();
    private ArrayList<Integer> input = new ArrayList<>();
    private Colors currentPlayer;
    private String dicesName;
    private Boolean skip, found, playerInput, bearOff, skipBearOff;

    public Gameplay(){
        System.out.println("*-*-*-*-*- BLACKGAMMON -*-*-*-*-*");
        System.out.println("RED- ?\nBLUE- T");
        board = new Board();
        board.draw();
        currentPlayer = board.getCurrentPlayer();
        skip = false;
        found = false;
        playerInput = false;
        bearOff = false;
        skipBearOff = false;
    }

    public void run() {
        int start, end;
        currentPlayer = Colors.RED;

        rollDice();
        getInputLogic();

        while(skip) {
            currentPlayer = getOppositeplayer(currentPlayer);
            board.setCurrentPlayer(currentPlayer);
            board.draw();
            rollDice();
            getInputLogic();

        }

        start = input.get(0);
        input.remove(0);
        end = input.get(0);
        input.remove(0);

        while (!board.isWin(Colors.RED) && !board.isWin(Colors.BLUE)) {

            if (board.canMove(start,end)) {
                board.move(start, end);
                board.draw();
            }

            if (dice.isEmpty()) {
                currentPlayer = getOppositeplayer(currentPlayer);
                board.setCurrentPlayer(currentPlayer);
                board.draw();
                rollDice();
            }

            if (!board.isWin(Colors.RED) && !board.isWin(Colors.BLUE)) {
                getInputLogic();
            }

            while(skip) {
                currentPlayer = getOppositeplayer(currentPlayer);
                board.setCurrentPlayer(currentPlayer);
                board.draw();
                rollDice();
                getInputLogic();

            }

            start = input.get(0);
            input.remove(0);
            end = input.get(0);
            input.remove(0);

        }

        if (board.isWin(Colors.RED)){
            System.out.println("Congratulations!!! Red has Won");
        }
        if (board.isWin(Colors.BLUE)){
            System.out.println("Congratulations!!! Blue has Won");
        }
    }

    public void getInputLogic(){

        skip = false;
        found = false;
        playerInput = false;
        bearOff = false;
        skipBearOff = false;

        int startNum = 0;
        int endNum = 0;
        int result;
        String endInputTemp, startInputTemp;

        System.out.println("Player " + currentPlayer + " turn.");
        numDicesLeft();
        System.out.println(dicesName);
        System.out.println("Enter the spot 'initial-final' to move the pieces. Type 'skip' to skip your turn if you cannot move your pieces.");
        System.out.print("> ");

        Scanner getRawinput = new Scanner(System.in);
        String raw = getRawinput.nextLine() + "-";
        Scanner in = new Scanner(raw).useDelimiter("-");
        startInputTemp = in.next();
        try {
            startNum = Integer.valueOf(startInputTemp);
        }catch (NumberFormatException e) {
            if (startInputTemp.toUpperCase().contentEquals("R"))
                startNum = 0;
            else if (startInputTemp.toUpperCase().contentEquals("B"))
                startNum = 27;
            else if (startInputTemp.toUpperCase().contentEquals("RB")) {
                startNum = 7;
                bearOff = true;
            }
            else if (startInputTemp.toUpperCase().contentEquals("BB")) {
                startNum = 20;
                bearOff = true;
            }
            else if (startInputTemp.toLowerCase().contains("skip")) {
                skip = true;
                found = true;
                endNum = 0;
            }
            else
                System.out.println("Incorrect Input for initial input.");
        }
        if(!skip) {
            endInputTemp = in.next();
            try {
                endNum = Integer.valueOf(endInputTemp);
            } catch (NumberFormatException e) {
                if (endInputTemp.contentEquals("R"))
                    endNum = 0;
                else if (endInputTemp.contentEquals("B"))
                    endNum = 27;
                else
                    System.out.println("Incorrect Input for final input.");
            }
        }

        if (bearOff){
            boolean correctBearoff = false;
            skipBearOff = true;
            while (!correctBearoff) {

                for (Integer i : dice) {
                    if (currentPlayer == Colors.RED) {
                        if (endNum == i) {
                            correctBearoff = true;
                        }
                    }else{
                        if (endNum == (25-i)) {
                            correctBearoff = true;
                        }
                    }
                }

                if (!correctBearoff){
                    GetInput getInput = new GetInput().invoke();
                    startNum = getInput.getStartNum();
                    endNum = getInput.getEndNum();
                }
            }

            input.add(startNum);
            input.add(endNum);

            for (int i = 0; i < dice.size(); i++) {
                if ((dice.get(i).equals(endNum)))  {
                    dice.remove(i);
                    numDicesLeft();
                }
            }
        }

        if (!skipBearOff && !skip) {

            result = endNum - startNum;
            if (result < 0)
                result *= -1;

            while (!playerInput) {
                if (currentPlayer == Colors.RED) {
                    if (startNum > endNum) {
                        playerInput = true;
                    }
                } else if (currentPlayer == Colors.BLUE) {
                    if (startNum < endNum) {
                        playerInput = true;
                    }
                }

                if (!playerInput) {
                    GetInput getInput = new GetInput().invoke();
                    startNum = getInput.getStartNum();
                    endNum = getInput.getEndNum();
                }
            }

            while (!found) {
                for (int i = 0; i < dice.size(); i++) {

                    if (((startNum >= 0 && startNum <= 24) &&
                            (endNum >= 0 && endNum <= 24)) &&
                            (dice.get(i).equals(result)) ||
                            board.isHomeready(currentPlayer)) {
                        input.add(startNum);
                        input.add(endNum);

                        if (board.canMove(startNum, endNum)) {
                            dice.remove(i);
                            numDicesLeft();
                        }
                        found = true;
                        break;
                    }

                }

                if (!found) {
                    GetInput getInput = new GetInput().invoke();
                    startNum = getInput.getStartNum();
                    endNum = getInput.getEndNum();
                    result = getInput.getResult();
                }
            }
        }
    }

    public void rollDice(){
        dice.clear();
        Random rand = new Random();
        int diceOne;
        int diceTwo;

        diceOne = rand.nextInt(6) + 1;
        diceTwo = rand.nextInt(6) + 1;

        if (diceOne == diceTwo){
            dice.add(diceOne);
            dice.add(diceOne);
            dice.add(diceTwo);
            dice.add(diceTwo);
        }
        else{
            dice.add(diceOne);
            dice.add(diceTwo);
        }

        StringBuilder output = new StringBuilder();
        output.append("The number on the dice are: ");
        for (Integer i : dice){
            output.append(" " +i+ " ");

        }

        dicesName = output.toString();

    }

    public void numDicesLeft(){
        StringBuilder output = new StringBuilder();
        output.append("The number on the dice are: ");
        for (Integer i : dice){
            output.append(" " +i+ " ");

        }
        dicesName = output.toString();
    }

    private Colors getOppositeplayer(Colors currentPlayer) {
        switch (currentPlayer){
            case RED:
                return Colors.BLUE;
            case BLUE:
                return Colors.RED;
            default:
                return Colors.GREY;
        }
    }

    private class GetInput {

        private int startNum = 0;
        private int endNum = 0;
        private int result = 0;

        public int getResult() {
            return result;
        }
        public int getStartNum() {
            return startNum;
        }
        public int getEndNum() {
            return endNum;
        }

        public GetInput invoke() {
            skip = false;
            found = false;
            playerInput = false;
            bearOff = false;
            skipBearOff = false;

            String endInputTemp, startInputTemp;

            System.out.println("Player " + currentPlayer + " turn.");
            numDicesLeft();
            System.out.println(dicesName);
            System.out.println("Enter the spot 'initial-final' to move the pieces. Type 'skip' to skip your turn if you cannot move your pieces.");
            System.out.print("> ");

            Scanner getRawinput = new Scanner(System.in);
            String raw = getRawinput.nextLine() + "-";
            Scanner in = new Scanner(raw).useDelimiter("-");
            startInputTemp = in.next();
            try {
                startNum = Integer.valueOf(startInputTemp);
            }catch (NumberFormatException e) {
                if (startInputTemp.toUpperCase().contentEquals("R"))
                    startNum = 0;
                else if (startInputTemp.toUpperCase().contentEquals("B"))
                    startNum = 27;
                else if (startInputTemp.toUpperCase().contentEquals("RB")) {
                    startNum = 7;
                    bearOff = true;
                }
                else if (startInputTemp.toUpperCase().contentEquals("BB")) {
                    startNum = 20;
                    bearOff = true;
                }
                else if (startInputTemp.toLowerCase().contains("skip")) {
                    skip = true;
                    found = true;
                    endNum = 0;
                }
                else
                    System.out.println("Incorrect Input for initial input.");
            }
            if(!skip) {
                endInputTemp = in.next();
                try {
                    endNum = Integer.valueOf(endInputTemp);
                } catch (NumberFormatException e) {
                    if (endInputTemp.contentEquals("R"))
                        endNum = 0;
                    else if (endInputTemp.contentEquals("B"))
                        endNum = 27;
                    else
                        System.out.println("Incorrect Input for final input.");
                }
            }
            result = endNum - startNum;
            if (result < 0)
                result *= -1;
            return this;
        }
    }
}
