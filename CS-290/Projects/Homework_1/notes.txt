public Polynomial (){
        Polynomial p = new Polynomial("");
        poly = p.getTerms();
    }

    public Polynomial (ArrayList<Term> t){
        for (Term t1 : t){
            poly.add(t1);
        }
    }


#######################################

if (t.isEqual(t_2)){
                    System.out.print("kunal");
                    temp = t.add(t_2);
                    temp_1.add(temp);
                }

####################################

  for (Term t : poly){
            for (Term t_3 : temp_1){
                if (!t.isEqual(t_3)){
                    temp_1.add(t);
                }
            }
        }

        for (Term t : t2.getTerms()){
            for (Term t_3 : temp_1){
                if (!t.isEqual(t_3)){
                    temp_1.add(t);
                }
            }
        }

###########################################

if (!temp_1.contains(t) && !temp_1.equals(t)){
                    temp_1.add(t_2);
                }
                if (!temp_1.contains(t_2) && !temp_1.equals(t_2)){
                    temp_1.add(t_2);
                }

for (Term t : temp_122){
            flag = false;
            while (!flag) {
                
                j = t.duplicates(newP1);
                System.out.print("..." + j + "...");
                if (j == 1){
                    //System.out.print("..." + t + "...");
                    newTemp.add(t);
                    flag = true;
                }
                else{

                    if (newTemp.contains(t)){
                        aux = temp_12.lastIndexOf(t);
                        aux_t = temp_12.get(aux);
                        aux1 = newTemp.indexOf(t);
                        aux_11 = newTemp.get(aux1);


                        aux_1 = aux_t.add(aux_11);
                        newTemp.add(aux1,aux_1);

                        temp_12.remove(aux);
                        newP1 = new Polynomial(temp_12);
                    }
                    else{
                        newTemp.add(t);
                        aux = temp_12.lastIndexOf(t);
                        temp_12.remove(aux);
                        newP1 = new Polynomial(temp_12);
                    }
                }
            }
        }

        Polynomial tempP1 = new Polynomial(newTemp);





public boolean containElement (char[] c){
        for (int i = 0; i < c.length ; i++){
            if (!var.contains(c[i])){
                return false;
            }
        }
            return true;
    }

###################################################
 public ArrayList<Term> sort (){

        ArrayList<Term> org = new ArrayList<>(poly);
        ArrayList<Term> newTemp = new ArrayList<>(org);

        Term t1, t2;
        int k = 0;

        for (int i = 0; i < org.size(); i++){
           for (int j = 0; j < org.size(); j++){
               //System.out.print(" Original" + org.toString());
               if ( (org.get(i).isEqual(org.get(j))) && (i != j) ){
                   k++;
                   //System.out.print(" All in" + org.toString());
                   t1 = org.get(i);
                   t2 = org.get(j);
                   org.remove(i);
                   //System.out.print(" i removed" + org.toString());
                   org.remove(j - 1);
                   //System.out.print(" j-1 removed" + org.toString());
                   org.add(i, t1.add(t2));
                   System.out.print( org.toString() + " i = " + i + " j = " + j
                           + " k = " + k + "\n");
               }
           }
        }
        return org;
    }

    ###############################################
    C:\Users\kunmu\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.0.0\junit-jupiter-api-5.0.0.jar

    vars.clear();
            exps.clear();
            temp.clear();
            arrayT.clear();
            coef = -3;
            vars.add('x');
            exps.add(2);
            t4_1 = new Term(coef,vars,exps);
            vars.clear();
            exps.clear();
            coef = -2;
            vars.add('x');
            exps.add(1);
            t4_2 = new Term(coef,vars,exps);
            arrayT.add(t4_1);
            arrayT.add(t4_2);
            size = p4_4.getTerms().size();
            temp = new ArrayList<>(p4_4.getTerms());
            for (int i = 0; i < size; i++) {
                checkTerm(temp.get(i), arrayT.get(i).getCoef(), arrayT.get(i).getVar()
                        ,  arrayT.get(i).getExp());
            }

            System.out.print("Diff " + p4_4 + "\n");


#############################
if (coef > 0)
            temp = s_coef+s_expr;
        else if (coef == 0)
            temp = "";
        else
            temp =  s_coef + s_expr;
        //System.out.print("---**" + temp + "**---");"-" +

        if (temp.length() == 2 && (temp.contains("+") || temp.contains("-")) && (!temp.contains("0"))){
            temp = temp.substring(1,temp.length());
        }

        if (temp.length() == 1 && (temp.contains("0"))){
            temp = "";
        }

