C51 COMPILER V9.54   MAIN                                                                  10/19/2018 02:10:52 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          //Kunal Mukherjee
   2          //10/9/10
   3          #include <at89c51cc03.h>
   4          #include <stdio.h>
   5          #include <stdlib.h>
   6          
   7          //*Global functions 
   8          
   9          //*Global functions for hardware code
  10          void SetLed(unsigned char row,
  11                      unsigned char column,
  12                      unsigned char state);
  13          unsigned char GetLedStatus(unsigned char row,
  14                                     unsigned char column);
  15          void DoLED(unsigned char r, unsigned char c);
  16          unsigned char getUpDn (void);
  17          void makeInitialGenUp(void);
  18          void makeInitialGenDown(void);
  19          unsigned char checkStatus(unsigned char row,
  20                                  unsigned char col);
  21          void OutputEncoder(unsigned char rfRow);
  22          void makeHrGlass(void);
  23          //external assembly lanaguge program
  24          extern int Assem(); //return 0
  25            
  26          //*initialize global constants
  27          unsigned char down = 0;
  28          unsigned char up = 1;
  29          unsigned char flat = 2;
  30          
  31          //*initialize global variables
  32          unsigned char LED[16];
  33          unsigned char refreshRow = 0; //row to be refreshed
  34          
  35          int main()
  36          {
  37   1        //*Main code
  38   1      
  39   1        //*local variable  
  40   1        int i, ledRow, ledCol;
  41   1      
  42   1        //*Initialize timer 0 interrupt
  43   1        //set the clock control register to double clock
  44   1        CKCON = 0x01; 
  45   1        //set up Timer 0 in the 16-bit auto-reload mode, 
  46   1        //not gated, with an internal clock
  47   1        TMOD = 0x01;
  48   1        //calculate value for timer zero 
  49   1        //refresh rate 2 ms = 2000 us
  50   1        //2000/.2127 = 9402 counts
  51   1        //65536-9402 = 56134 counts
  52   1        //56134 = 0xDB46
  53   1        TH0 = 0xDB;
  54   1        TL0 = 0x46;
C51 COMPILER V9.54   MAIN                                                                  10/19/2018 02:10:52 PAGE 2   

  55   1        
  56   1        //*Set up timer 0 for multplexing 
  57   1        //enable T0 interrupt and the global interrupt
  58   1        TR0 = 1;
  59   1        ET0 = 1; 
  60   1        EA =1;  
  61   1        
  62   1        //*Set up A/D converter for Tilt sensor
  63   1        ADCF  = 0x01 ; //P1.0 = ADC[0]
  64   1        ADCON = 0X20; //enable ADC Function
  65   1        ADCLK = 0X00; //Prescalar to 0
  66   1        
  67   1        //*Initialize varibales 
  68   1        
  69   1        //*Clear LED memeory map
  70   1         for (i = 0; i <16; i++)
  71   1        {
  72   2          LED[i] = 0x00;
  73   2        }
  74   1      
  75   1        //Place hour glass outlinne in memory map
  76   1        if (getUpDn() == down)
  77   1             makeInitialGenUp();
  78   1         else
  79   1             makeInitialGenDown();
  80   1         
  81   1        //*Place hour glass outlinne in memory map
  82   1        makeHrGlass();
  83   1         
  84   1         //*Start timer for multiplexing display
  85   1        //turn on timer 0
  86   1        TR0 = 1;
  87   1      
  88   1        //*main program loop
  89   1        while(1) //user != 100
  90   1          {     
  91   2            if(getUpDn() == down) //Start at top and move down
  92   2            {
  93   3                for (ledRow = 15; ledRow >= Assem(); ledRow--)
  94   3              {
  95   4                for (ledCol = 7; ledCol >= Assem(); ledCol--)
  96   4                {
  97   5                  DoLED(ledRow,ledCol);
  98   5                }
  99   4              }
 100   3            }
 101   2            else //STart at bottom and move up
 102   2            {
 103   3              for (ledRow = Assem(); ledRow < 16; ledRow++)
 104   3              {
 105   4                for (ledCol = Assem(); ledCol < 8; ledCol++)
 106   4                {
 107   5                  DoLED(ledRow, ledCol);
 108   5                }
 109   4              }
 110   3            }
 111   2            
 112   2            while(P1_5 == Assem()); //if stopped wait here user, pause  feature
 113   2                                    //P1_5 = 0
 114   2                
 115   2            if(P1_4 == Assem()) //P1_4 = 0 //reset feature
 116   2              {
C51 COMPILER V9.54   MAIN                                                                  10/19/2018 02:10:52 PAGE 3   

 117   3                //*Clear LED memeory map
 118   3                   for (i = Assem(); i <16; i++)
 119   3                  {
 120   4                    LED[i] = 0x00;
 121   4                  } 
 122   3                  
 123   3                //*Place hour glass outlinne in memory map
 124   3                  if (getUpDn() == down)
 125   3                  {
 126   4                    makeInitialGenUp();
 127   4                  }             
 128   3                  else if(getUpDn() == up)
 129   3                  {
 130   4                    makeInitialGenDown();   
 131   4                  }   
 132   3      
 133   3                  makeHrGlass();
 134   3              }                                           
 135   2          }     
 136   1          
 137   1      }
 138          
 139          void DoLED(unsigned char r, unsigned char c)
 140            {
 141   1      
 142   1          //printf("r: %i c: %i status:%i\n", r,c, GetLedStatus(r,c));
 143   1          if(getUpDn() != flat)
 144   1          {
 145   2            if (getUpDn()== down)
 146   2            {
 147   3              //look at the bottom LED
 148   3              //Move LED at (r,c) accordign to algirithm
 149   3              //if not fill, move led
 150   3              if((GetLedStatus(r,c) != 0) &&
 151   3                          (r+1 < 16) &&
 152   3                          (GetLedStatus(r+1,c) == 0) &&
 153   3                          (checkStatus(r+1,c) != 0))
 154   3              {
 155   4                SetLed(r+1, c, 1);
 156   4                SetLed(r  , c, 0);
 157   4              }
 158   3              else
 159   3              {
 160   4                //look at bottom left
 161   4                //if not fill, move led
 162   4                if((GetLedStatus(r,c) != 0) &&
 163   4                              (r+1 < 16) &&
 164   4                              (c-1 >= 0) &&
 165   4                              (GetLedStatus(r+1,c - 1) == 0) &&
 166   4                              (checkStatus(r+1,c - 1) != 0))
 167   4                {
 168   5                  SetLed(r+1, c - 1, 1);
 169   5                  SetLed(r  , c, 0);
 170   5                }
 171   4              //look at bottom right
 172   4              //if not fill, move led
 173   4                else if((GetLedStatus(r,c) != 0) &&
 174   4                                  (r+1 < 16)&&
 175   4                                  (c+1 <= 7)&&
 176   4                                  (GetLedStatus(r+1,c + 1) == 0) &&
 177   4                                  (checkStatus(r+1,c + 1) != 0))
 178   4                {
C51 COMPILER V9.54   MAIN                                                                  10/19/2018 02:10:52 PAGE 4   

 179   5                  SetLed(r+1, c + 1, 1);
 180   5                  SetLed(r  , c, 0);
 181   5                }
 182   4              }
 183   3            }
 184   2            else
 185   2            {
 186   3              //look at the top LED
 187   3              //Move LED at (r,c) accordign to algirithm
 188   3              //if not fill, move led
 189   3              if((GetLedStatus(r,c) != 0) &&
 190   3                          (r-1 >= 0) &&
 191   3                          (GetLedStatus(r-1,c) == 0) &&
 192   3                          (checkStatus(r-1,c) != 0))
 193   3              {
 194   4                SetLed(r-1, c, 1);
 195   4                SetLed(r  , c, 0);
 196   4              }
 197   3              else
 198   3              {
 199   4                //look at bottom left
 200   4                //if not fill, move led
 201   4                if((GetLedStatus(r,c) != 0) &&
 202   4                              (r-1 >= 0) &&
 203   4                              (c-1 >= 0) &&
 204   4                              (GetLedStatus(r-1,c - 1) == 0) &&
 205   4                              (checkStatus(r-1,c - 1) != 0))
 206   4                {
 207   5                  SetLed(r-1, c - 1, 1);
 208   5                  SetLed(r  , c, 0);
 209   5                }
 210   4              //look at bottom right
 211   4              //if not fill, move led
 212   4                else if((GetLedStatus(r,c) != 0) &&
 213   4                                  (r-1 >= 0) &&
 214   4                                  (c+1 <= 7) &&
 215   4                                  (GetLedStatus(r-1,c + 1) == 0) &&
 216   4                                  (checkStatus(r-1,c+1) != 0))
 217   4                {
 218   5                  SetLed(r-1, c + 1, 1);
 219   5                  SetLed(r  , c, 0);
 220   5                }
 221   4              }
 222   3            }
 223   2          }
 224   1        }
 225          
 226          //gets the led status of the row and col
 227          unsigned char GetLedStatus(unsigned char row,
 228                                     unsigned char column)
 229          {
 230   1        unsigned char temp = LED[row];
 231   1      
 232   1        return temp & (1 << column);
 233   1      }
 234          
 235          //sets the led at the point
 236          void SetLed(unsigned char row,
 237                      unsigned char column,
 238                      unsigned char state)
 239          {
 240   1        if(state)
C51 COMPILER V9.54   MAIN                                                                  10/19/2018 02:10:52 PAGE 5   

 241   1          LED[row] |= (1 << column);
 242   1        else
 243   1          LED[row] &= ~(1 << column);
 244   1      }
 245          
 246          //looks at the accelerometer and gives a result out
 247          unsigned char getUpDn (void)
 248          {
 249   1          unsigned char tmp;
 250   1          int i,result; 
 251   1          
 252   1          ADCON &= 0xF8; // Reset ADC Channel Select
 253   1          ADCON |= 0x00; // Select ADC = Ch0
 254   1          ADCON |= 0x20; // Use Standard mode
 255   1          ADCON |= 0x08; // Start ADC Convert
 256   1          
 257   1          tmp = (ADCON & 0x10); // Get done bit
 258   1          while(tmp != 0x10) // Loop until complete
 259   1            tmp = (ADCON & 0x10);
 260   1          result = ADDH; // Send 8 MSB to P2
 261   1          result *= 4;
 262   1          result += ADDL;
 263   1          
 264   1          ADCON &= 0xEF; //clear ADEOC = 0  
 265   1          
 266   1          for (i = 0; i < 33; i++);
 267   1          
 268   1          //return down;
 269   1          if (result > 535)
 270   1            return down;
 271   1          else if (result < 380)
 272   1            return up;
 273   1          else
 274   1            return flat;
 275   1      }
 276          
 277          //generates the hour glass
 278          void makeHrGlass(void)
 279            {
 280   1      
 281   1          SetLed(5,7, 0);
 282   1          SetLed(6,7, 0);
 283   1          SetLed(7,7, 0);
 284   1          SetLed(8,7, 0);
 285   1          SetLed(9,7, 0);
 286   1          SetLed(10,7, 0);
 287   1      
 288   1          SetLed(5,0, 0);
 289   1          SetLed(6,0, 0);
 290   1          SetLed(7,0, 0);
 291   1          SetLed(8,0, 0);
 292   1          SetLed(9,0, 0);
 293   1          SetLed(10,0, 0);
 294   1      
 295   1          SetLed(6,6, 0);
 296   1          SetLed(7,6, 0);
 297   1          SetLed(8,6, 0);
 298   1          SetLed(9,6, 0);
 299   1      
 300   1          SetLed(6,1, 0);
 301   1          SetLed(7,1, 0);
 302   1          SetLed(8,1, 0);
C51 COMPILER V9.54   MAIN                                                                  10/19/2018 02:10:52 PAGE 6   

 303   1          SetLed(9,1, 0);
 304   1      
 305   1          SetLed(7,5, 0);
 306   1          SetLed(8,5, 0);
 307   1      
 308   1          SetLed(7,2, 0);
 309   1          SetLed(8,2, 0);
 310   1        }
 311            
 312              ///check to see if the location to go, is 
 313            //part of the hour glass or not
 314          unsigned char checkStatus(unsigned char row,
 315                                  unsigned char col)
 316          {
 317   1         if ((row == 5) || (row == 6) || (row == 7) ||
 318   1             (row == 8) || (row == 9) || (row == 10))
 319   1         {
 320   2             if((col == 0) || (col == 7))
 321   2             {
 322   3                 return 0;
 323   3             }
 324   2         }
 325   1      
 326   1         if  ((row == 6) || (row == 7) ||
 327   1              (row == 8) || (row == 9))
 328   1          {
 329   2              if((col == 6) || (col == 1))
 330   2             {
 331   3                 return 0;
 332   3             }
 333   2          }
 334   1      
 335   1          if((row == 7) ||
 336   1              (row == 8))
 337   1          {
 338   2              if((col == 5) || (col == 2))
 339   2             {
 340   3                 return 0;
 341   3             }
 342   2          }
 343   1      
 344   1          return 1;
 345   1      
 346   1      }
 347          
 348          //Makes the initial generation for Up
 349          void makeInitialGenUp(void)
 350          {
 351   1          int i , j;
 352   1          for (i = 0; i < 8; i++)
 353   1          {
 354   2              for (j = 0; j < 7; j++)
 355   2              {
 356   3                  SetLed(j,i,1);
 357   3              }
 358   2          }
 359   1      }
 360          
 361          //Makes the initial generation for Down
 362          void makeInitialGenDown(void)
 363          {
 364   1          int i , j;
C51 COMPILER V9.54   MAIN                                                                  10/19/2018 02:10:52 PAGE 7   

 365   1          for (i = 0; i < 8; i++)
 366   1          {
 367   2              for (j = 15; j > 8; j--)
 368   2              {
 369   3                  SetLed(j,i,1);
 370   3              }
 371   2          }
 372   1      }
 373          
 374          
 375            //*Timer 0 multiplexor interrupt
 376            //Convert refreshRow to port bits for decoders
 377            //Make decoders active
 378            //Send d to the 74LS244 port
 379            void T0Int() interrupt 1 using 1
 380            {
 381   1          unsigned char d;
 382   1          //*reload the timer value
 383   1          //calculate value for timer zero 
 384   1          //refresh rate 2 ms = 2000 us
 385   1          //2000/.2127 = 9402 counts
 386   1          //65536-9402 = 56134 counts
 387   1          //56134 = 0xDB46
 388   1          TH0 = 0xDB;
 389   1          TL0 = 0x46;
 390   1          
 391   1          //* Get the data d = LED[refreshRow]
 392   1          d = LED[refreshRow];
 393   1          //Send d to the 74LS244 port  
 394   1          P3 = d;
 395   1          
 396   1          //convert refreshRow to port bits for decoder
 397   1          OutputEncoder(refreshRow);    
 398   1          
 399   1          //Update refreshRow
 400   1          refreshRow++;
 401   1          if(refreshRow == 16)
 402   1            refreshRow = 0;
 403   1        }
 404            
 405            // Assume we have two 3x8 decoders, 74LS138
 406            //both of which are connected to P1.4, P1.5, P1.7, 
 407            //with their enable pins being (P0.1, and P0.2)
 408          
 409            void OutputEncoder(unsigned char rfRow)
 410            {
 411   1          // Handle choosing the right encoder based on MSB
 412   1          P0_2 = P0_3 = 0;
 413   1          if((rfRow & (1 << 3)) == 0)   
 414   1            P0_3 = 1;   
 415   1          else
 416   1            P0_2  = 1;
 417   1          
 418   1          // Output the least significan 3 bits from 
 419   1          //the input number onto the encoders input
 420   1          P0_7 = ((rfRow >> 2) & 1);
 421   1          P0_6 = ((rfRow >> 1) & 1);
 422   1          P0_5 = ((rfRow >> 0) & 1);
 423   1          
 424   1        }
 425            

C51 COMPILER V9.54   MAIN                                                                  10/19/2018 02:10:52 PAGE 8   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1256    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     20      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
