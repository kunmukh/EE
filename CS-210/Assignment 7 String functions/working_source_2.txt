//File: Asn07KXM
//Kunal Mukherjee
//cs 210
//Assignment: Assignment 07 String Functions
//For this assignment you will write three "bullet-proof" string function: Str2Double,Int2Bin, and Bin2Int. These functions will notify the user after parsecing the string if it had accurately convert a string to double or an Integer to Binary or a Binary number to an integer

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//

#include<stdio.h>
#include<string.h>
#include<conio.h>
#pragma warning(disable:4996)


double Str2Double(char s[], double *d); //this function accepts a string less than 80 characters long, parses the string, and converts the result to a double which is returned in an output parameter. 
int Bin2Int(char bin[], int n);
int power(int c, int d);

int main()
{
    char s[]= {'/','/'};
    char bin[] = {'1','0','1','0','0','1','0'};   

    double d;
    double status;
    int n, b;
    n = sizeof(bin);
    b = Bin2Int(bin, n);
    status = Str2Double(s, &d);
   

    printf("\nThe status is :%f\n", status);    
    printf("\nThe Integer value is :%d\n", b);
         
}

double Str2Double(char s[], double *d)
{
    int cnt_decimal = 0;
    int cnt_digit = 0;
    int cnt_non_digit = 0;

    for (int i = 0; i < 80; i++)
    {
        if (s[i] == 46)
        {
            cnt_decimal++;
        }
        else  if ((s[i] >= 65 && s[i] <= 90) || (s[i] >= 97 && s[i] <= 122))
        {
            cnt_digit++;
        }
        
        else if (((s[i] > 0 && s[i] <= 64)||(s[i] >=91 && s[i] <= 96)||(s[i] >=123 && s[i] <= 255)))
        {
            cnt_non_digit++;
        }
    }

    if ((cnt_decimal > 1 && cnt_digit == 0) || cnt_non_digit > 1)
    {
        *d = 0;
        return 0;
    }

    else if (cnt_decimal == 0 || cnt_decimal == 1)
    {
        if (cnt_digit > 0 && cnt_non_digit == 0)
        {
             *d = 1;
             return 1;
        }

        else if (cnt_digit > 0 && cnt_non_digit > 0)
        {
             *d = -1;
             return -1;
        }
    }

}

int Bin2Int(char bin[], int n)
{      
    
    int dec=0; 
    int j=0,f;    
     
    
    for (int i = 0; i < n ; i++)
    {
        printf("%c",(char)bin[i]);
    }   
    
    for(int i=n-1 ; i>=0 ; i--) 
    {
        dec=((bin[i]-48)*power(2,j))+dec;
        j++;
    }

    return dec;

}

int power(int c, int d)
{
    int pow=1;
    int i=1;
    while(i<=d) 
    {
        pow=pow*c;
        i++;
    }
    return pow;
}

