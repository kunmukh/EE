#lang eopl
;CS 380 - Extra Credit
;15/11/17
;LETREC-LANG Mukherjee

;Scanner Specification
;(arbno Exp) --> (___ ____ ___)
;(separated0list Exp "," ) --> (___,___,___)
(define scanner-spec-let
  '((white-sp (whitespace) skip)
    (comment ("%" (arbno (not #\newline))) skip)
    (identifier (letter (arbno (or letter digit))) symbol)
    (number ((or "-" "+" digit)(arbno digit)) number)))

;Grammar Definition
(define grammar-let
  '((Program (Exp)
             a-Program)
    (Exp (number)
         const-Exp)
    (Exp (identifier)
         var-Exp)
    (Exp ("-" "(" Exp "," Exp ")")
         diff-Exp)
    (Exp ("+" "(" Exp "," Exp ")")
         plus-Exp)    
    (Exp ("*" "(" Exp "," Exp ")")
         multiply-Exp)
    (Exp ("QuoInt" "(" Exp "," Exp ")")
         quotient-Exp)
    (Exp ("RemInt" "(" Exp "," Exp ")")
         remainder-Exp)
    (Exp ("zero?" "(" Exp ")")
         zero-Exp?)
    (Exp ("greater?" "(" Exp "," Exp ")")
         greater-Exp?)
    (Exp ("less?" "(" Exp "," Exp ")")
         less-Exp?)
    (Exp ("equal?" "(" Exp "," Exp ")")
         equal-Exp?)
    (Exp ("if" Exp "then" Exp "else" Exp)
         if-Exp)    
    (Exp ("let" (arbno identifier "=" Exp ) "in" Exp)
         let-Exp)
    (Exp ("let*" (arbno identifier "=" Exp ) "in" Exp)
         let*-Exp)
    (Exp ("proc" "(" (separated-list identifier "," ) ")" Exp)
         proc-Exp)
     (Exp ("(" Exp (arbno Exp) ")")
         call-Exp)
    (Exp ("letrec" (arbno identifier "(" (separated-list identifier ",") ")" "=" Exp) "in" Exp)
         letrec-Exp)
    (Exp ("minus" "(" Exp ")")
         minus-Exp)))

(sllgen:make-define-datatypes scanner-spec-let grammar-let)

(define list-the-datatypes
  (lambda ()
    (sllgen:list-define-datatypes scanner-spec-let grammar-let)))

(define just-scan
  (sllgen:make-string-scanner scanner-spec-let grammar-let))

(define scan&parse
  (sllgen:make-string-parser scanner-spec-let grammar-let))

(define run
  (lambda (str)
    (Expval->Extractor (value-of-Program (scan&parse str)))))

(define Expval->Extractor
  (lambda (val)
    (cases Expval val
      (bool-val (bool)
               bool)
      (num-val (num)
               num)
      (else
       (report-Expval-extractor-error 'bool val)))))          

 
;Enviroment Expression
;Extended environment Rec added, which created the environment datatype
;3 constructors
(define-datatype environment environment?
  (empty-env)
  (extend-env (var symbol?)
              (val Expval?)
              (saved-env environment?))
  (extend-env-rec (proc-names (list-of symbol?))
                  (bound-vars (list-of (list-of symbol?)))
                  (proc-bodies (list-of Exp?))
                  (saved-env environment?)))

;Apply environment is a modifier which uses the interpreter cases to modify the encironment
(define apply-env
  (lambda (search-var env)
    (cases environment env
      (empty-env ()
                 #f)
      (extend-env (var val saved-env)
                  (if (eqv? search-var var)
                      val
                      (apply-env search-var saved-env)))
      (extend-env-rec (proc-names bound-vars proc-bodies saved-env)
                      (let recursion ((proc-names proc-names)
                                      (bound-vars bound-vars)
                                      (proc-bodies proc-bodies))
                        (cond ((null? proc-names)
                               (apply-env search-var saved-env))
                              ((eqv? search-var (car proc-names))
                               (proc-val
                                (procedure (car bound-vars) (car proc-bodies) env)))
                               (else
                                (recursion (cdr proc-names) (cdr bound-vars) (cdr proc-bodies)))))))))

;Extends the eviroment by taking in a list of identifiers and expressions
(define extend-env-new
  (lambda (vars vals env)
    (if (null? vars)
        env
        (extend-env-new (cdr vars)
                        (cdr vals)
                        (extend-env (car vars) (car vals) env)))))

;Building up of the initial enviroenment
(define init-env
  (lambda ()
    (extend-env 'i (num-val 1)
                (extend-env 'v (num-val 5)
                            (extend-env 'x (num-val 10)
                                        (empty-env))))))

;Proc DataType
;This creates the ectressed values for proc
(define-datatype proc proc?  
  (procedure (bound-vars (list-of symbol?))
             (body Exp?)
             (saved-env environment?)))

;Extend-env-new is an auxilary function that extendes the envionment that goes through the list generated by arbno,
;and extends the envionment until all the variables are taken care of.
;the body is now evaluated in the environment that has extended the environment with all the vars 
(define apply-procedure
  (lambda (proc1 vals)
    (cases proc proc1                     
      (procedure (bound-vars body saved-env)
                 (value-of body (extend-env-new bound-vars vals saved-env))))))



;Expressed and Denoted Value
(define-datatype Expval Expval?
  (num-val (num number?))
  (bool-val (bool boolean?))
  (proc-val (proc proc?)))

(define Expval->num
  (lambda (val)
    (cases Expval val
      (num-val (num)
               num)
      (else
       (report-Expval-extractor-error 'num val)))))

(define Expval->bool
  (lambda (val)
    (cases Expval val
      (bool-val (bool)
               bool)
      (else
       (report-Expval-extractor-error 'bool val)))))

(define Expval->proc
  (lambda (val)
    (cases Expval val
      (proc-val (proc)
               proc)
      (else
       (report-Expval-extractor-error 'proc val)))))

(define report-Expval-extractor-error
  (lambda (type val)
    (eopl:error 'Exp-val "Error extracting ~s from ~s" type val)))

;Interpreter
(define value-of-Program
  (lambda (pgm)
    (cases Program pgm
      (a-Program (Exp)
                 (value-of Exp (init-env))))))

(define value-of
  (lambda (Exp1 env)
    (cases Exp Exp1
      (const-Exp (num)
                 (num-val num))
      (var-Exp (var)
               (apply-env var env))
      (diff-Exp (Exp1 Exp2)
                (let ((val1 (value-of Exp1 env))
                      (val2 (value-of Exp2 env)))
                  (let ((num1 (Expval->num val1))
                        (num2 (Expval->num val2)))
                    (num-val
                     (- num1 num2)))))
      (plus-Exp (Exp1 Exp2)
                (value-of (diff-Exp Exp1 (minus-Exp Exp2)) env))                  
      (multiply-Exp (Exp1 Exp2)                    
                      (value-of (letrec-Exp
                                 (list 'multi)
                                 (list (list 'x 'y))
                                 (list(if-Exp
                                       (greater-Exp? (const-Exp 0) (var-Exp 'x))
                                       (if-Exp
                                        (zero-Exp? (var-Exp 'x))
                                        (const-Exp 9999)
                                        (diff-Exp
                                         (call-Exp (var-Exp 'multi) (list(plus-Exp (var-Exp 'x) (const-Exp 1)) (var-Exp 'y)))
                                         (var-Exp 'y)))
                                       (if-Exp
                                        (zero-Exp? (var-Exp 'x))
                                        (const-Exp 0)
                                        (diff-Exp
                                         (call-Exp (var-Exp 'multi) (list(diff-Exp (var-Exp 'x) (const-Exp 1)) (var-Exp 'y)))
                                         (minus-Exp (var-Exp 'y))))))
                                 (call-Exp (var-Exp 'multi) (list Exp1 Exp2))) env))
      (quotient-Exp (Exp1 Exp2)
                    (value-of (letrec-Exp
                               (list 'dev)
                               (list (list 'x 'y))
                               (list(if-Exp
                                     (zero-Exp? (var-Exp 'y))
                                     (const-Exp 9999)
                                     (if-Exp
                                      (greater-Exp? (var-Exp 'y) (var-Exp 'x))
                                      (const-Exp 0)
                                      (diff-Exp
                                       (call-Exp (var-Exp 'dev) (list(diff-Exp (var-Exp 'x) (var-Exp 'y)) (var-Exp 'y)))
                                       (minus-Exp (const-Exp 1))))))
                               (call-Exp (var-Exp 'dev) (list Exp1 Exp2))) env))
      (remainder-Exp (Exp1 Exp2)
                    (value-of (letrec-Exp
                               (list 'rem)
                               (list (list 'x 'y))
                               (list(if-Exp
                                     (zero-Exp? (var-Exp 'y))
                                     (const-Exp 9999)
                                     (if-Exp
                                      (greater-Exp? (var-Exp 'y) (var-Exp 'x))
                                      (var-Exp 'x)
                                      (plus-Exp
                                       (call-Exp (var-Exp 'rem) (list(diff-Exp (var-Exp 'x) (var-Exp 'y)) (var-Exp 'y)))
                                       (const-Exp 0)))))
                               (call-Exp (var-Exp 'rem) (list Exp1 Exp2))) env))      
      (zero-Exp? (Exp1)
                 (value-of (equal-Exp? Exp1 (const-Exp '0)) env))               
      (less-Exp? (Exp1 Exp2)
                 (let ((val1 (value-of Exp1 env))
                       (val2 (value-of Exp2 env)))
                   (bool-val (< (Expval->num val1) (Expval->num val2)))))                     
      (greater-Exp? (Exp1 Exp2)
                 (value-of (less-Exp? Exp2 Exp1) env))
      (equal-Exp? (Exp1 Exp2)
                 (if
                  (eqv?
                   (Expval->bool (value-of (greater-Exp? Exp1 Exp2) env)) (Expval->bool (value-of (less-Exp? (const-Exp 1) (const-Exp 0)) env)))
                     (if
                      (eqv?
                       (Expval->bool (value-of (less-Exp? Exp1 Exp2) env)) (Expval->bool (value-of (less-Exp? (const-Exp 1) (const-Exp 0)) env)))
                         (value-of (less-Exp? (const-Exp 0) (const-Exp 1)) env)
                         (value-of (less-Exp? (const-Exp 1) (const-Exp 0)) env))
                     (value-of (less-Exp? (const-Exp 1) (const-Exp 0)) env)))                      
      (if-Exp (Exp1 Exp2 Exp3)
              (let ((val1 (value-of Exp1 env)))
                (if (Expval->bool val1)
                    (value-of Exp2 env)
                    (value-of Exp3 env))))
      (let-Exp (var Exp1 body)
               (let ((val1 (rands-list-maker Exp1 env)))
                 (value-of body (extend-env-new var val1 env))))
      (let*-Exp (vars vals body)
                (answer-let* vars vals body env))
      (proc-Exp (bound-var body)
                (proc-val (procedure bound-var body env)))
      (call-Exp (exp1 exp2)
                (let ((rator (Expval->proc (value-of exp1 env)))
                      (rand (rands-list-maker exp2 env)))
                  (apply-procedure rator rand)))
      (letrec-Exp (proc-name bound-vars proc-body letrec-body)
                  (value-of letrec-body
                   (extend-env-rec proc-name bound-vars proc-body env)))
      (minus-Exp (Exp1)
                 (value-of (diff-Exp (diff-Exp Exp1 Exp1) Exp1) env)))))

;List of the value-of expressions
(define rands-list-maker
  (lambda (exp2 env)
    (if (null? exp2)
        (list (num-val 0))
        (cons (value-of (car exp2) env)
              (rands-list-maker (cdr exp2) env)))))

;LET* expression evaluator
;Evaluate the expression and then extend the environment with the value of the current exp
(define answer-let*
  (lambda (vars vals exp env)
    (if (null? vars)
        (value-of exp env)
        (answer-let* (cdr vars) (cdr vals) exp
                    (extend-env (car vars) (value-of (car vals) env) env)))))


(define report-error
  (lambda ()
    (eopl:error 'Exp "Error")))




;TEST CASES
(define Morse
        "let x = less? (5,3) in if x then 1 else 0")

(define Morse_1
  "let x = proc (y)
           let z = 5
                    in proc (u)
                               if zero? (u)
                                  then 0
                                  else ((x 5) 0)
                                  in ((x 5) 0)")

(define test_2
  "let f = proc (y) -(y, 3) in (f 10)")

(define test_5
  " minus(-5)")

(define test_5_1
  " minus(5)")

(define test_6
  " -(5,2)")
(define test_6_1
  " -(-5,2)")
(define test_6_2
  " -(5,-2)")
(define test_6_3
  " -(-5,-2)")

(define test_7
  " +(5,2)")
(define test_7_1
  " +(-5,2)")
(define test_7_2
  " +(5,-2)")
(define test_7_4
  " +(-5,-2)")

(define test_8
  " greater?(2,7)")
(define test_8_1
  " greater?(7,2)")
(define test_8_2
  " greater?(7,7)")

(define test_9
  " less?(5,7)")
(define test_9_1
  " less?(7,5)")
(define test_9_2
  " less?(7,7)")

(define test_10
  " equal?(1,1)")
(define test_10_1
  " equal?(1,0)")
(define test_10_2
  " equal?(0,1)")

(define test_1
  " zero?(2)")
(define test_1_1
  " zero?(-2)")
(define test_1_2
  " zero?(0)")


(define test_12
  " *(5,2)")
(define test_12_1
  " *(-5,2)")
(define test_12_2
  " *(5,-2)")
(define test_12_4
  " *(-5,-2)")

(define test_13
  " QuoInt(10,3)")

(define test_14
  " RemInt(99,30)")

(define LET
  "let x = 30
     in let x = -(x,1)
            y = -(x,2)
       in -(x,y)")

(define LET*
  "let x = 30
       in let* x = -(x,1) y = -(x,2)
          in -(x,y)")

(define multiRec
  "letrec
     even (x) = if zero?(x) then 1 else (odd -(x, 1))
     odd (x)  = if zero?(x) then 0 else (even -(x, 1))
   in (odd 13)")

;SUDO TEST CASES
(define test
  "let x = 5 in x")

(define test_2_
  "let f = proc (y) -(y, 3) in (f 10)")

(define test_22
  "let f = proc (y) -(y, 3) in (f 10)")

(define test_55
  "let f = proc (y,x) -(y, x) in (f 2 3)")

(define test_3
  "let x = 10 in - (x, 3)")

(define test_4
  "let x = 200
   in let f = proc (z) -(z,x)
      in let x = 100
         in let g = proc (z) -(z,x)
            in -((f 1) , (g 1))")

(define multiplier
  "let makemult = proc (maker)
                  proc (x)
                  if zero? (x)
                  then 0
                  else - ( ( (maker maker) -(x,1) ), -4 )
                  in let times4 = proc (x) ((makemult makemult) x)
                     in (times4 3)")

(define times
  "let makemult = proc (y) proc (maker)
                  proc (x)
                  if zero? (x)
                  then 0
                  else - (((maker maker) -(x,1)), -(0,y))
                  in let times = proc (y)
                                 proc (x)
                                 (((makemult y) (makemult y)) x)
                                 in ((times 10) 20)")

(define factorial
  "let makemult = proc (y) proc (maker)
                  proc (x)
                  if zero? (x)
                  then 0
                  else - (((maker maker) -(x,1)), -(0,y))
                  in let times = proc (y)
                                 proc (x)
                                 (((makemult y) (makemult y)) x)
                                 in let prodmake = proc (maker)
                                                   proc (x)
                                                   if zero? (x)
                                                   then 1
                                                   else (( times (( maker maker) -(x,1))) x)
                                                   in let fact = proc (x) ((prodmake prodmake) x)
                                                       in (fact 5)")

(define sum
  "let maker = proc (maker)
               proc (x)
               if zero? (x)
               then 0
               else - (((maker maker) -(x,1)), -(0,x))
               in let sum = proc (x) ((maker maker) x)
                  in (sum 10)")


(define letrec_sing
  "letrec mult(x) = +(x ,2) in (mult 2)")

(define letrec_multi
  "letrec mult(x,y) = +(x ,y) in (mult 3 2)")

"if less?(0,x)
    then minus(x)
    else x"

"if less?(0,y)
    then minus(y)
    else y"


(define letrec_mult
  " letrec multi (x,y) = if greater? (0,x)
                         then 

                         if zero? (x)
                         then 0
                         else
                         -((multi +(x,1) y),y)

                         else
                         if zero? (x)
                         then 0
                         else -((multi -(x,1) y),minus(y))
                         in (multi -3 -6)")


(define letrec_div  
  "letrec dev (x,y) =  if zero? (y)
                       then 9999
                       else
                       if greater? (y,x)
                       then 0
                       else -((dev -(x,y) y), minus(1))
                       in (dev 2 0)")

(define letrec_rem
  "letrec rem (x,y) = if zero? (y)
                       then 9999
                       else
                       if greater? (y,x)
                       then x
                       else +((rem -(x,y) y), 0)
                       in (rem 45 0)")

(define test-env
  (lambda ()
    (empty-env)))

(define test-3
  (lambda ()
    (extend-env 'x (num-val 10) (empty-env))))

(define TEST
  (list   
  " minus(-5)"
  " -(5,2)"
  " +(-5,2)"
  " greater?(2,7)"
  " less?(5,7)"
  " equal?(9,8)"
  " zero?(1)"
  " *(5,-2)"
  " QuoInt(5,2)"
  " RemInt(5,2)"))








           
             
    
    

