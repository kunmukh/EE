//Driver Module
module BCD7Seg(btn0, btn1, sw, CLOCK_50, Seg1, Seg4);

input btn0, btn1, CLOCK_50;
input [3:0] sw;
output [6:0] Seg1;
output [6:0] Seg4;

reg clk0;
reg reset;

wire Zin;

initial
begin
	clk0 <= 0;
end;

always@(posedge CLOCK_50)
begin
	if(!btn0)
		clk0 <= 1'b1;
	else
		clk0 <= 1'b0;
end

always@(posedge CLOCK_50)
begin
	if(!btn1)
		reset <= 1'b1;
	else
		reset <= 1'b0;
end

uPController MC (clk0, reset, Zin, ControlBus, Seg4);
uPHardware MH (sw, ControlBus, clk0, OutBus, Zin);
BCDSeg dig1 (OutBus, Seg1);

endmodule

// A BCD7
module BCDSeg(bcd,seg);
     
//Declare inputs,outputs and internal variables.
input [3:0] bcd;
output [6:0] seg;
reg [6:0] seg;

//always block for converting bcd digit into 7 segment format
    always @(bcd)
    begin
        case (bcd) //case statement
            0 : seg = 7'b1000000;
            1 : seg = 7'b1111001;
            2 : seg = 7'b0100100;
            3 : seg = 7'b0110000;
            4 : seg = 7'b0011001;
            5 : seg = 7'b0010010;
            6 : seg = 7'b0000010;
            7 : seg = 7'b1111000;
            8 : seg = 7'b0000000;
            9 : seg = 7'b0011000;
            //switch off 7 segment character when the bcd digit is not a decimal number.
            default : seg = 7'b1111111; 
        endcase
    end

endmodule

//The uPHardware
module uPHardware(InBus, Control, clk, OutBus, Zout);
input [3:0] InBus;
input [6:0] Control;
input clk;

output [3:0] OutBus;
output Zout;

wire [3:0] Rout;
wire [3:0] Mout;
wire [3:0] Qout;
wire [3:0] ALUout;
wire [3:0] n_Qout;

GPRegister R (Control[5], 1'b0, Control[2], clk, ALUout, Rout);
GPRegister M (Control[1], 1'b0, 1'b0, clk, InBus, Mout);
GPRegister Q (Control[6], Control[4], 1'b0, clk, InBus, Qout); 

ALU AOL (Mout, Rout, Aout, Control[3], clk);

assign n_Qout = ~Qout;
nand (zout, n_Qout[0], n_Qout[1], n_Qout[2], n_Qout[3]);

//assign OutBut = Control[0] ? Rout : 4'bzzzz; //if Control[0]= 1,  outbus = Rout, 
                                              //else rout is high impedence mode
															 
assign OutBut = ALUout;
endmodule

//GPRegister Module
module GPRegister(L, D, C, clk, BusIn, BusOut);
input L, D, C;
input clk;
input [3:0] BusIn;
output [3:0] BusOut;
reg [3:0] BusOut;

always@ (posedge clk)
begin
	if(clk)
		begin
			if(L)
			begin
				BusOut <= BusIn;
			end
			if(C)
			begin
				BusOut <= 0;
			end
			if (D)
			begin
				BusOut <= BusOut - 4'b0001;
			end
		end
end
endmodule

//ALU Module
module ALU(L, R, Result, Sel);
input [3:0] L;
input [3:0] R;
output [3:0] Result;
input Sel;
//input clk;
reg [3:0] Result;

always @(posedge Sel)
begin	
			Result <= R+L;	
end
endmodule

//uController
module uPController1 (clk, reset, Zin, ControlBus, Seg);

input clk;
input Zin;
input reset;

output [6:0] ControlBus;
output [6:0] seg;

reg [2:0] pCounter;
reg [1:0] conditionSelect;
reg [2:0] branchAddress;
reg [11:0] ControlRegister;
//reg [6:0] ControlBus;
reg [11:0] ROM [6:0]; //5 postion and save 12-bit for each data 12x6

BCDSeg dig (pCounter, seg);

initial
begin
	pCounter <= 0;
	ROM[0]<=12'b000000000110;
	ROM[1]<=12'b000001000000;
	ROM[2]<=12'b000000111000;
	ROM[3]<=12'b010100000000;
	ROM[4]<=12'b000000000001;
	ROM[5]<=12'b101010000000;
end

always @(posedge clk)
begin	
	ControlRegister <= ROM[pCounter];
	conditionSelect <= ControlRegister[11:10];
	branchAddress <= ControlRegister[9:7];
	//ControlBus = ControlRegister[6:0];
end

always @ (negedge clk)
begin
	case(conditionSelect)	
		2'b00:
		begin
			pCounter <= pCounter + 1'b1;
		end		
		2'b01:
		begin
			if(Zin)
				pCounter <= branchAddress;
			else
				pCounter <= pCounter + 1'b1;
			end
		2'b10:
		begin 
			pCounter <= branchAddress;
		end
	endcase
end 


assign ControlBus = controlRegister [6:0];
endmodule
