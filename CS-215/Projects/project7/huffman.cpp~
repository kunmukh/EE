///File: huffman.cpp
// Implementtaion of the huffman class that allauws code to be
// displayed in binary tree  with certain properties
//-----------------------------------------------------------------
// Class: CS 215                     Instructor: Dr. Deborah Hwang
// Assignment:    Project 7          Date assigned:  4/19/2017
// Programmer:    Kunal Mukherjee    Date completed: 4/26/2017

//directives
#include "huffman.h"
#include <iostream>
#include <string>

//struct definition of TreeNode
struct TreeNode
{
  char info;
  TreeNode* left;
  TreeNode* right;
};

//Prototype of helper function
//CopyTree
void  CopyTree (TreeNode* & copyRoot, //REC & PASSBK: TreeNode to be copied
		const TreeNode* localRoot); //REC & PASSBK: pointer to the copy
                                            //root
//Destroy
void Destroy (TreeNode* & localRoot); //REC & PASSBK: TreeNode to be destroyed

//WriteTree
void WriteTree (std::ostream & out, //REC & PASSBK: the output stream
		const TreeNode* localRoot, //REC: root of the tree
		int level);          //REC: level of the tree

//CharToCode
//returns the string of the path coded
std::string CharToCode (char ch, //REC: the char to be coded
			TreeNode* localRoot, //REC: the root of the tre
			std::string pathSoFar); //REC: string of the path

//Default Constructor
HuffmanTree::HuffmanTree()
{
  //the intial pointer points to nothing
  root = NULL;
}

//Load
void HuffmanTree::Load (std::istream& codefile)
{
  //The number of elements in the tree
  int num = 0;
  //The code to be inserted
  char code;
  //The path of the code where it needs to be placed
  std::string numCode;  

  //The root is being formed
  root = new TreeNode;
  //The root is always '*'
  root->info = '*';
  //The left and right are initialized to NULL
  root->left = NULL;
  root->right = NULL;
  //The temp is being pointed to the root node
  TreeNode * temp = root;
  
  codefile >> num;
  //The number of times the program needs to run to form the tree
  for (int i = 0; i < num; i++)
    {
      //read the character
      codefile >> code;
      //read the path
      codefile >> numCode;
      //reset the temp to root
      temp = root;
      
      for ( int j = 0; j < numCode.size(); j++)
	{
	  //if the path has 0 then its on the left side
	  if (numCode[j] == '0')
	    {
	      //if the left points to NULL, then a node has to be created
	      if (temp->left == NULL)
		{
		  //A newNode is created and intiialized
		  temp->left = new TreeNode;
		  temp->left->info = '*';
		  temp->left->left = NULL;
		  temp->left->right = NULL;
		}
	      //temp is pointing to the right node
	      temp = temp->left;		  
	    }
	  
	  if (numCode[j] == '1')
	    {
	      //if the left points to NULL, then a node has to be created
	      if (temp->right == NULL)
		{
		  //A newNode is created and intiialized
		  temp->right = new TreeNode;
		  temp->right->info = '*';
		  temp->right->left = NULL;
		  temp->right->right = NULL;
		}
	      //the temp is now poiniting to the right node
	      temp = temp->right;	      
	    }	 
	}
      
      //where the poinitng ends the code has to be inserted there
      if (code == ' ')
	temp->info = '%';
      //if it is newline then $ should be printed
      else if (code == '\n')
	temp->info = '$' ;
      //else whatever the character is there it should be printed
      else
	temp->info = code;
    }  
  
}

//Copy Constructor
HuffmanTree::HuffmanTree (const HuffmanTree & source)
{
  // Calls recursive function CopyTree to copy the source
  CopyTree (root, source.root);
}

//CopyTree
void CopyTree (TreeNode*& copyRoot, const TreeNode* localRoot)
{
  if (localRoot == NULL) // the localroot is empty
    copyRoot = NULL;// copy is the empty tree
  else
    {
      // Make copy of the root node
      copyRoot = new TreeNode;
      copyRoot->info = localRoot->info;
      //Make copy of the left sub-tree
      CopyTree (copyRoot->left, localRoot->left);
      //Make copy of the right sub-tree
      CopyTree (copyRoot->right, localRoot->right);
    }
}

//Destructor
HuffmanTree::~HuffmanTree()
{
  // Calls recursively function Destroy to destroy the tree
  Destroy (root);
}

//Destroy
void Destroy(TreeNode*& localRoot)
// Post: tree is empty; nodes have been deallocated.
{
  if (localRoot != NULL) //not empty
    {
      // Destroy the left child
      Destroy (localRoot->left);
      //Destroy the right child
      Destroy (localRoot->right);
      // Delete the root node
      delete localRoot;
    }
}

//Make Empty
void HuffmanTree::MakeEmpty()
{
  //call the destroy function with the localRoot as the Root node
  Destroy(root);
  //node the root points to NULL
   root = NULL;
}

//Assignment Operator
HuffmanTree & HuffmanTree::operator = (const HuffmanTree & source)
{
  // Use the swap technique
  HuffmanTree theCopy (source);
  // Swap contents
  std::swap (root, theCopy.root);  
  // Return self object, destructor automatically called on theCopy
  //    to delete the old data nodes
  return *this;   // 'this' is a pointer, so need to dereference
}

//Write
void HuffmanTree::Write (std::ostream & out) const
{
  //calls the write tree with the localRoot as the node
  //and level 0
  WriteTree(out, root, 0);
}

//WriteTree
void WriteTree (std::ostream & out, const TreeNode* localRoot, int level)
{   
  //if the pointer is not NULL then only it cna print the nodes
  if (localRoot != NULL)
    {
      //The format of the printing is right node left
      
      //Call the write again as the right to print the left node
      //and the level is increased by 1      
      WriteTree(out, localRoot->right, level +1);

      //A variable created to store the spaces
      std::string spaces;
      
      //The number of spaces is calculated by level
      for (int i = 0; i < 8 * level; i++)
	spaces = spaces + ' ';
      //if it empty then % should be printed
      if (localRoot->info == ' ')
	out << spaces << "%" << std::endl;
      //if it is newline then $ should be printed
      else if (localRoot->info == '\n')
	out << spaces << "$" << std::endl;
      //else whatever the character is there it should be printed
      else
	out << spaces << localRoot->info << std::endl;
      
      //Call the write again as the left to print the left node
      //and the level is increased by 1
      WriteTree(out, localRoot->left, level +1);
    }
  
}
    
// Encode
 void HuffmanTree::Encode (std::istream & messageFile, std::ostream & out) const
 {
   std::string output; //the output of the coded message
   std::string path; //path or the coded message form
   char ch; //the character to be coded
   
   //while there is chatacrer in the input stream
   while (messageFile >> ch)
     {
       //the output is huffman coded 
       output = CharToCode (ch, root, path);
       //the output is now inserted into the output stream
       out << output;
     }
   // a new line is entered after the coded message
   out << std::endl;
 }

//CharToCode
std::string CharToCode (char ch, TreeNode* localRoot, std::string pathSoFar)
{
  //if the the info does not have the character and the node is a leaf then
  //it should return empty string
  if (localRoot->info != ch && localRoot->right == NULL && localRoot->left == NULL)
    {
      pathSoFar.clear();
      return pathSoFar;
    }
  //if it is a leaf and has the desired character then it should return that
  if (localRoot->info == ch && localRoot->right == NULL && localRoot->left == NULL)
    return pathSoFar;
  //if it is at a node then it should concatinate 0 if it is going to left
  //and 1 if it is going to right
  else
    {      
	return CharToCode (ch, localRoot->left, pathSoFar + '0') +
	  CharToCode (ch, localRoot->right, pathSoFar + '1');      
    }
}

 //Decode
 void HuffmanTree::Decode (std::istream & messageFile, std::ostream & out) const
 {
   //To read the character 
   char ch;
   //A temp pinter to pint to the root
   TreeNode * temp;
   TreeNode * last;
   temp = root;   
   //The messageFile is read one character at a time
   while (messageFile >> ch)
     {  
       //if it reads 0
       if (ch == '0')
	 { 
	   // and the left node is * 
	   if (temp->left->info == '*')
	     {
	       //temp pointer should be updated and moved to the left side
	       //as the character is not found yet
	       temp = temp->left;	      
	     }
	   else
	     {
	       //if found then it should be printed in the output stream
	       //and the temp is updated
	       if (temp->left->info == '%')
		 out << " ";
	       else if (temp->left->info == '$')
		 out << "\n";
	       else
		 out << temp->left->info;
	       
	       last = temp->left;
	       temp = root;
	     }
	 }

       // and the right node is *
       if (ch == '1')
	 {
	   //temp pointer should be updated and moved to the right side
	   //as the character is not found yet
	   if (temp->right->info == '*')
	     {
	       temp = temp->right;
	     }
	   else
	     {
	       //if found then it should be printed in the output stream
	       //and the temp is updated
	       if (temp->right->info == '%')
		 out << " ";
	       else if (temp->right->info == '$')
		 out << "\n";
	       else
		 out << temp->right->info;

	       last = temp->right;
	       temp = root;
	     }
	 }      
     }

   if (last->info == '$')
     return;
       
   out << std::endl;
   
 }
